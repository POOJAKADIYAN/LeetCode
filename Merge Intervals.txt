Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

*You may assume that the intervals were initially sorted according to their start times*.

**Example 1:**

Given intervals `[1,3],[6,9]` insert and merge `[2,5]` would result in `[1,5],[6,9]`.

**Example 2:**

Given `[1,2],[3,5],[6,7],[8,10],[12,16]`, insert and merge `[4,9]` would result in `[1,2],[3,10],[12,16]`.

This is because the new interval `[4,9]` overlaps with `[3,5],[6,7],[8,10]`.

Make sure the returned intervals are also sorted.

## SOLUTION -

```cpp
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool cmp(Interval a, Interval b)
{
    return a.start<=b.start;
}
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) 
{
    if(intervals.size()==0)
    {
        intervals.push_back(newInterval);
        return intervals;
    }
    intervals.push_back(newInterval);
    sort(intervals.begin(),intervals.end(),cmp);
    int i=1,j=0,n=intervals.size();
    while(i<n)
    {
        if(intervals[j].end>intervals[i].start)
            intervals[j].end=max(intervals[i].end,intervals[j].end);
        else
        {
            j++;
            intervals[j]=intervals[i];
        }
        i++;
    }
    intervals.erase(intervals.begin()+j+1,intervals.end());
    return intervals;
}
```